/**
 * Utility functions for difficulty rating validation and state management
 */

import type { DifficultyMeta } from '../utils/learnEngine'
import type { ReviewDifficultyChoice } from '@/shared/lib/reviewScheduler'

/**
 * Validates if a difficulty rating is required based on card state
 */
export function validateRatingRequirement(difficultyMeta: DifficultyMeta | null): {
  isRequired: boolean
  isLocked: boolean
  hasExistingChoice: boolean
  canModify: boolean
} {
  if (!difficultyMeta) {
    return {
      isRequired: false,
      isLocked: false,
      hasExistingChoice: false,
      canModify: true
    }
  }

  const isRequired = difficultyMeta.shouldPrompt ?? false
  const hasExistingChoice = Boolean(difficultyMeta.lastChoice)
  const canModify = difficultyMeta.canAdjust ?? true
  const isLocked = !isRequired && !canModify

  return {
    isRequired,
    isLocked,
    hasExistingChoice,
    canModify
  }
}

/**
 * Gets the appropriate message for the current rating state
 */
export function getRatingStateMessage(
  validation: ReturnType<typeof validateRatingRequirement>,
  difficultyMeta: DifficultyMeta | null
): {
  type: 'warning' | 'success' | 'info' | null
  message: string
  showPreviousChoice: boolean
} {
  if (validation.isRequired) {
    return {
      type: 'info',
      message: 'SmartLearn g·ª£i √Ω b·∫°n t·ª± ƒë√°nh gi√° l·∫°i th·∫ª n√†y ƒë·ªÉ thu·∫≠t to√°n hi·ªÉu ch√≠nh x√°c c·∫£m nh·∫≠n c·ªßa b·∫°n. B·∫°n v·∫´n c√≥ th·ªÉ b·ªè qua v√† ti·∫øp t·ª•c h·ªçc.',
      showPreviousChoice: Boolean(difficultyMeta?.lastChoice)
    }
  }

  if (validation.hasExistingChoice) {
    if (!validation.canModify) {
      return {
        type: 'info',
        message: 'ƒê√°nh gi√° g·∫ßn nh·∫•t c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng. H√£y ti·∫øp t·ª•c luy·ªán t·∫≠p, h·ªá th·ªëng s·∫Ω h·ªèi l·∫°i sau m·ªôt v√†i c√¢u.',
        showPreviousChoice: true
      }
    }
    return {
      type: 'success',
      message: 'SmartLearn ƒë√£ l∆∞u m·ª©c ƒë·ªô b·∫°n ch·ªçn. B·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t l·∫°i b·∫•t c·ª© l√∫c n√†o.',
      showPreviousChoice: false
    }
  }

  return {
    type: null,
    message: '',
    showPreviousChoice: false
  }
}

/**
 * Determines the visual styling class for the rating panel
 */
export function getRatingPanelStyling(
  validation: ReturnType<typeof validateRatingRequirement>,
  activeDifficultyChoice: ReviewDifficultyChoice | null
): string {
  const baseClasses = 'mt-4 rounded-xl border p-4 transition-all duration-200'
  
  if (validation.isRequired) {
    return `${baseClasses} border-info/50 bg-info/5 ring-1 ring-info/40`
  }
  
  if (activeDifficultyChoice) {
    return `${baseClasses} border-success/50 bg-success/5 ring-1 ring-success/30`
  }
  
  return `${baseClasses} border-border/40 bg-muted/10`
}

/**
 * Validates a difficulty choice submission
 */
export function validateDifficultySubmission(
  choice: ReviewDifficultyChoice,
  validation: ReturnType<typeof validateRatingRequirement>
): { isValid: boolean; reason?: string } {
  if (!validation.canModify && !validation.isRequired) {
    return {
      isValid: false,
      reason: 'B·∫°n v·ª´a ƒë√°nh gi√° th·∫ª n√†y. H·ªçc th√™m v√†i c√¢u r·ªìi h√£y c·∫≠p nh·∫≠t l·∫°i nh√©!'
    }
  }

  if (!choice || !['veryHard', 'hard', 'again', 'normal'].includes(choice)) {
    return {
      isValid: false,
      reason: 'Invalid difficulty choice'
    }
  }

  return { isValid: true }
}

/**
 * Debug utility to log rating state for troubleshooting
 */
export function debugRatingState(
  difficultyMeta: DifficultyMeta | null,
  activeDifficultyChoice: ReviewDifficultyChoice | null,
  submittingChoice: ReviewDifficultyChoice | null
): void {
  if (process.env.NODE_ENV !== 'development') return

  const validation = validateRatingRequirement(difficultyMeta)
  console.group('üéØ Difficulty Rating State Debug')
  console.log('üìä Difficulty Meta:', difficultyMeta)
  console.log('‚úÖ Active Choice:', activeDifficultyChoice)
  console.log('‚è≥ Submitting:', submittingChoice)
  console.log('üîí Validation:', validation)
  console.log('üìù State Message:', getRatingStateMessage(validation, difficultyMeta))
  console.groupEnd()
}